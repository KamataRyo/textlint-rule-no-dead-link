{"version":3,"sources":["../src/no-dead-link.js"],"names":["uri","method","opts","compress","redirect","res","status","finalRes","ok","url","message","statusText","err","isAlive","DEFAULT_OPTIONS","checkRelative","baseURI","ignore","URI_REGEXP","isRelative","parse","protocol","reporter","context","options","Syntax","getSource","report","RuleError","fixer","helper","Object","assign","lint","node","index","indexOf","resolve","result","msg","fix","replaceTextRange","length","URIs","Str","isChildNode","BlockQuote","Link","text","matched","exec","push","raw","Document","Promise","all","map","item","linter"],"mappings":"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","file":"no-dead-link.js","sourcesContent":["import { RuleHelper } from 'textlint-rule-helper';\nimport fetch from 'isomorphic-fetch';\nimport URL from 'url';\n\nconst DEFAULT_OPTIONS = {\n  checkRelative: false,  // should check relative URLs.\n  baseURI: null,  // a base URI to resolve a relative URL.\n  ignore: [],  // URIs to be skipped from availability checks.\n};\n\n// http://stackoverflow.com/a/3809435/951517\n// eslint-disable-next-line max-len\nconst URI_REGEXP = /(https?:)?\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g;\n\n/**\n * Returns `true` if a given URI is relative.\n * @param {string} uri\n * @return {Boolean}\n */\nfunction isRelative(uri) {\n  return URL.parse(uri).protocol === null;\n}\n\n/**\n * Checks if a given URI is alive or not.\n * @param {string} uri\n * @param {string} method\n * @return {{ ok: boolean, redirect?: string, message: string }}\n */\nasync function isAlive(uri, method = 'HEAD') {\n  try {\n    const opts = {\n      method,\n      // Disable gzip compression in Node.js\n      // to avoid the zlib's \"unexpected end of file\" error\n      // https://github.com/request/request/issues/2045\n      compress: false,\n      // manual redirect\n      redirect: 'manual',\n    };\n    const res = await fetch(uri, opts);\n\n    if (res.status === 301) {\n      const finalRes = await fetch(uri, {\n        method: 'HEAD',\n        compress: false,\n      });\n      return {\n        ok: finalRes.ok,\n        redirect: finalRes.url,\n        message: `${res.status} ${res.statusText}`,\n      };\n    }\n    return {\n      ok: res.ok,\n      message: `${res.status} ${res.statusText}`,\n    };\n  } catch (err) {\n    return {\n      ok: false,\n      message: err.message,\n    };\n  }\n}\n\nfunction reporter(context, options = {}) {\n  const {\n    Syntax,\n    getSource,\n    report,\n    RuleError,\n    fixer,\n  } = context;\n  const helper = new RuleHelper(context);\n  const opts = Object.assign({}, DEFAULT_OPTIONS, options);\n\n  /**\n   * Checks a given URI's availability and report if it is dead.\n   * @param {TextLintNode} node TextLintNode the URI belongs to.\n   * @param {string} uri a URI string to be linted.\n   * @param {number} index column number the URI is located at.\n   */\n  const lint = async ({ node, uri, index }) => {\n    if (opts.ignore.indexOf(uri) !== -1) {\n      return;\n    }\n\n    if (isRelative(uri)) {\n      if (!opts.checkRelative) {\n        return;\n      }\n\n      if (!opts.baseURI) {\n        const message = 'The base URI is not specified.';\n        report(node, new RuleError(message, { index: 0 }));\n        return;\n      }\n\n      // eslint-disable-next-line no-param-reassign\n      uri = URL.resolve(opts.baseURI, uri);\n    }\n\n    const result = await isAlive(uri);\n    const { ok, redirect, message: msg } = result.ok ? result : await isAlive(uri, 'GET');\n\n    if (!ok) {\n      const message = `${uri} is dead. (${msg})`;\n      report(node, new RuleError(message, { index }));\n    } else if (redirect) {\n      const message = `${uri} is redirected. (${msg})`;\n      const fix = fixer.replaceTextRange([index, index + uri.length], redirect);\n      report(node, new RuleError(message, {\n        fix,\n        index,\n      }));\n    }\n  };\n\n  /**\n   * URIs to be checked.\n   * @type {Array<{ node: TextLintNode, uri: string, index: number }>}\n   */\n  const URIs = [];\n\n  return {\n    [Syntax.Str](node) {\n      if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n        return;\n      }\n\n      // prevent double checks\n      if (helper.isChildNode(node, [Syntax.Link])) {\n        return;\n      }\n\n      const text = getSource(node);\n      let matched;\n\n      // eslint-disable-next-line no-cond-assign\n      while ((matched = URI_REGEXP.exec(text))) {\n        const uri = matched[0];\n        const index = matched.index;\n        URIs.push({ node, uri, index });\n      }\n    },\n\n    [Syntax.Link](node) {\n      if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n        return;\n      }\n      // [text](http://example.com)\n      //       ^\n      const index = node.raw.indexOf(node.url) || 0;\n      URIs.push({\n        node,\n        uri: node.url,\n        index,\n      });\n    },\n\n    [`${context.Syntax.Document}:exit`]() {\n      return Promise.all(\n        URIs.map((item) => lint(item)),\n      );\n    },\n  };\n}\n\nexport default {\n  linter: reporter,\n  fixer: reporter,\n};\n"]}